name: Create Release

on:
  push:
    tags:
      - "v*"

jobs:
  create_release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts (windows)
        uses: actions/download-artifact@v1
        with:
          name: windows-latest
      - name: download artifacts (macos)
        uses: actions/download-artifact@v1
        with:
          name: macos-latest
      - name: download artifacts (linux)
        uses: actions/download-artifact@v1
        with:
          name: ubuntu-latest
      - name: create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: true
      - name: upload release (ZIP)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-latest/canvas_grab.zip
          asset_name: canvas_grab-windows.zip
          asset_content_type: application/zip
      - name: upload release (tar)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-latest/canvas_grab.tar.gz
          asset_name: canvas_grab-windows.tar.gz
          asset_content_type: application/tar+gzip
      - name: upload release (ZIP)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu-latest/canvas_grab.zip
          asset_name: canvas_grab-linux.zip
          asset_content_type: application/zip
      - name: upload release (tar)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu-latest/canvas_grab.tar.gz
          asset_name: canvas_grab-linux.tar.gz
          asset_content_type: application/tar+gzip
      - name: upload release (ZIP)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos-latest/canvas_grab.zip
          asset_name: canvas_grab-darwin.zip
          asset_content_type: application/zip
      - name: upload release (tar)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos-latest/canvas_grab.tar.gz
          asset_name: canvas_grab-darwin.tar.gz
          asset_content_type: application/tar+gzip
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: install build tools
      id: install_dep
      run: |
        pip install virtualenv
        pip install pyinstaller
    - name: create virtualenv
      run: |
        python -m virtualenv .venv --clear
    - name: install dependencies in virtualenv (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\.venv\Scripts\activate.ps1
        pip install -r requirements.windows.txt
    - name: install dependencies in virtualenv (*nix)
      if: matrix.os != 'windows-latest'
      run: |
        source .venv/bin/activate
        pip install -r requirements.txt
    - name: packaging with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\.venv\Scripts\activate.ps1
        pyinstaller main.py --hidden-import pkg_resources.py2_warn -n canvas_grab --clean -p .venv\lib\python3.8\site-packages
    - name: packaging with PyInstaller (*nix)
      if: matrix.os != 'windows-latest'
      run: |
        source .venv/bin/activate
        pyinstaller main.py --hidden-import pkg_resources.py2_warn -n canvas_grab --clean -p ./.venv/lib/python3.8/site-packages
    - name: copy bundled files
      run: |
        cp README.md dist/
        cp README_zh-hans.md dist/
        cp config.example.toml dist/
        cp config.example.zh-hans.toml dist/
        cp LICENSE dist/
    - name: create tar
      run: |
        tar -C dist -czf canvas_grab.tar.gz .
    - name: create zip (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path dist -DestinationPath canvas_grab.zip
    - name: create zip (*nix)
      if: matrix.os != 'windows-latest'
      run: |
        (cd dist && zip -r - .) > canvas_grab.zip
    - name: upload artifact (zip)
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.os }}
        path: canvas_grab.zip
    - name: upload artifact (tar)
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.os }}
        path: canvas_grab.tar.gz